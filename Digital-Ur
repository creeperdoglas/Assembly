;
; Digitalur labb.asm
;
; Created: 2023-12-02 10:42:33
; Author : Melker Gustafsson
;
; Sätter programstarten vid adress 0x00, vilket är reset-vektorn.
.org 0x00
rjmp SETUP

; Definierar en avbrottsvektor vid adress 0x10 för Timer 1's overflow-avbrott.
.org 0x10 
rjmp ISR_TIMER1

; Definierar en avbrottsvektor vid adress 0x12 för Timer 0's overflow-avbrott.
.org 0x12
rjmp ISR_TIMER0

.org 0x30
;här resten av kodens adress

SETUP: 

	.equ NUMBER_OF_DISPLAYS = 4
	.def COUNTER = r18

	ldi	r16, HIGH(RAMEND)
	out	SPH, r16
	ldi	r16, LOW(RAMEND)
	out	SPL, r16

	ldi r16, 0xFF
	out DDRB, r16
	   ; Ställer alla pinnar på Port B som utgångar.

	ldi r16, 0x03
	out DDRD, r16
	 ; Ställer Port D pinnar 0 och 1 som utgångar (används för displayen).

	ldi ZH, HIGH(NUMBER*2)
	ldi ZL, LOW(NUMBER*2)
	; Laddar Z pekare med starten av NUMBER tabellen 

; Allokerad N bytes i minnet.
	.dseg
	.org 0x60

TIME_VAR:
	.byte NUMBER_OF_DISPLAYS

CURRENT_DISPLAY:
	.byte 1
	.cseg

	ldi YL, LOW(TIME_VAR)
	ldi YH, HIGH(TIME_VAR)
	
	ldi r17, NUMBER_OF_DISPLAYS
	ldi r16,0x00
	call CLEAR_N_BYTES  //fråga varför den här och de två under inte kan vara rcall?
	call TIMER1_INIT
	call TIMER0_INIT
	sei   ;aktivera globalt avbrott
	jmp main

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CLEAR_N_BYTES:
	push YL
	push YH
	st Y+, r16 ; Allokerad N bytes i minnet.
	dec r17
	brne CLEAR_N_BYTES
	pop YH
	pop YL
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TIMER1_INIT: ; 16-bitars Timer 1 inställd som en overflow timer.
	
	; Ställer in räknarläge.
	ldi r16, (1<<WGM13)|(1<<WGM12)
	out TCCR1B, r16
	; Konfigurerar Timer 1 för CTC läge med OCR1A som topp.

	ldi r16, (1<<WGM11)|(0<<WGM10) 
	out TCCR1A, r16
	; Fortsätter konfigurationen av Timer 1 CTC läge.


	
    ; Ställer in max räknarvärde innan overflow.
	ldi r16, 0x3D
	out ICR1H, r16
	ldi r16, 0x08
	out ICR1L, r16
	 ; ICR1 är toppvärdet för Timer 1.

	; Ställer in prescaler och avbrott.
	in r16, TCCR1B  
	ori r16,(0<<CS12)|(1<<CS11)|(1<<CS10) ; Prescaler inställd till F_CPU/64

	out TCCR1B, r16
	ldi r16, 1<<TOIE1
	out TIMSK, r16
	; Aktiverar Timer 1 overflow avbrott.
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TIMER0_INIT:
	ldi r16, (0<<CS02)|(1<<CS01)|(0<<CS00) // Prescaler 256
	out TCCR0, r16	
	
	in r16, TIMSK
	ori r16, (1<<TOIE0)
	out TIMSK, r16
	 ; Aktiverar Timer 0 overflow avbrott.
	
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MAIN:
; Huvudloop där MCU kommer vänta på avbrott.

//nop
	rjmp MAIN
;--------------------------------------------------------------	


ISR_TIMER1:
	push r16
	in r16,SREG  ; Spara statusregister
	rcall TIMER_COUNTER
	out SREG,r16
	pop r16
	reti //återgå

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
ISR_TIMER0:
	push r16
	in r16,SREG ; Spara statusregister.
	rcall DISPLAY_TIME
	out SREG,r16
	pop r16
	reti //återgå

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DISPLAY_TIME:
	 push YL
	 push YH
	 push ZH
	 push ZL
	 push COUNTER

	 ; Laddar adressen för CURRENT_DISPLAY i Y register.
	 ldi YH, HIGH(CURRENT_DISPLAY)
	 ldi YL, LOW(CURRENT_DISPLAY)

	  ; Laddar det nuvarande displayvärdet i COUNTER och skickar det till PORTD.
	 ld COUNTER, Y
	 out PORTD, COUNTER

	   ; Beräknar adressen för tidsvärdet i TIME_VAR som ska visas och laddar det i r16.
	 ldi YH, HIGH(TIME_VAR)
	 ldi YL, LOW(TIME_VAR) 
	 add YL, COUNTER
	 ld  r16, Y

    ; Använder Z registret för att hämta displaydata från NUMBER tabellen.
	 ldi ZH, HIGH(NUMBER*2);
	 ldi ZL, LOW(NUMBER*2);
	 add ZL, r16
	 lpm r16, Z
	 out PORTB, r16

	 ; Öka COUNTER för att byta till nästa displaysegment.
	 inc COUNTER 
	 cpi COUNTER, NUMBER_OF_DISPLAYS
	 brne NOT_MAX_MODULO
	 clr COUNTER
	 ; Återställer COUNTER om alla displaysegment har uppdaterats.
 	 
NOT_MAX_MODULO:
; Laddar adressen för CURRENT_DISPLAY i Y register.
    ldi YH, HIGH(CURRENT_DISPLAY)
	ldi YL, LOW(CURRENT_DISPLAY) 
	st  Y, COUNTER 

	;återställ
	pop COUNTER
	pop ZL	
	pop ZH
    pop YH
	pop YL
	ret
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

TIMER_COUNTER:
  ; Laddar adressen för TIME_VAR i Y register.
	push r18
	push YH
	push YL					
	ldi	 YL,LOW(TIME_VAR)
	ldi  YH,HIGH(TIME_VAR)

NEXT_2SEGMENT:
	ldi r18,10

	call LOAD_STORE			
	brne DONE_WITH_INC

	subi r18, NUMBER_OF_DISPLAYS

	call LOAD_STORE
	brne DONE_WITH_INC
	rjmp NEXT_2SEGMENT		
				
	DONE_WITH_INC:
	pop YL
	pop YH
	pop r18
	ret
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

LOAD_STORE:
	ld r17,Y 
	inc r17
	cp r17, r18
	brne NOT_MAX
	clr r17
NOT_MAX:
	st Y+, r17 
	ret
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.org 0x0200 
NUMBER: .db 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x67   //hade 0x7C innan istället för D, verkar inte göra någon skillnad? kanske mer klarare nu
;definitionerna för 0-9
